表情包系统完整设计思路与实现方案
一、核心需求分析
主要目标
    • 分析LLM回复文本的情感倾向 
    • 智能选择对应的表情包文件夹 
    • 从文件夹中随机选择表情包发送给前端 
    • 通过概率控制表情包发送频率 
核心问题解决
    • LLM不听话问题：不依赖LLM主动输出标签，而是后处理分析LLM回复 
    • 匹配精确度问题：使用权重计分系统，支持模糊匹配和语境分析 
    • 发送频率控制：双重概率机制控制表情包发送频率
二、系统架构设计思路
模块化设计原则
表情包系统包 (emotion_system)
├── 词库管理层 (keyword_loader.py)
├── 情感分析层 (emotion_processor.py)  
├── 服务整合层 (emotion_service.py)
└── 包初始化 (__init__.py)
数据驱动设计
    • 所有配置参数集中在config.json 
    • 词库数据分离存储在JSON文件中 
    • 表情包按情感分类存储在文件夹中 
单一职责原则
    • 每个模块只负责一个核心功能 
    • 模块间通过清晰的接口通信 
    • 便于独立测试和维护

三、数据结构设计
词库结构设计
情感类别 -> 词汇分类 -> 关键词列表
例如：
Happy -> 基础词汇 -> ["开心", "高兴", "快乐"]
     -> 语气词 -> ["哈哈", "嘻嘻", "呵呵"]
     -> 网络用语 -> ["6666", "nice", "爽"]
文件系统结构
expression/
├── memes/                    # 表情包存储
│   ├── Happy/               # 各情感文件夹
│   ├── Angry/
│   └── ...
├── emotions.json            # 基础情感词库
├── behavior_emotions.json   # 行为情感词库
├── functional_types.json    # 功能性词库
└── config.json             # 配置文件

四、核心算法设计思路
权重计分系统（四阶段）
第一阶段：直接文本匹配
    • 扫描LLM回复中的关键词 
    • 不同词汇分类给予不同权重 
    • 基础词汇10分，语气词8分，感叹词7分，网络用语6分 
第二阶段：语境强化分析
    • 检测强化词（太、超、特别）→ 倍数×1.5 
    • 检测弱化词（有点、稍微）→ 倍数×0.8 
    • 检测句式特征（感叹句+3分，疑问句+2分） 
第三阶段：应用语境调整
    • 将强化倍数应用到基础得分 
    • 添加句式特征加分 
    • 得出各情感的最终得分 
第四阶段：兜底处理
    • 如果所有得分都低于阈值，给default文件夹保底分数 
    • 选择得分最高的情感文件夹
概率控制机制
    • 主概率：明确匹配情感时的发送概率 
    • 兜底概率：fallback到default时的发送概率 
    • 测试模式设为1.0，生产模式可调节
五、系统工作流程
初始化流程
系统启动 → 加载配置文件 → 初始化词库加载器 → 加载JSON词库 → 
初始化情感处理器 → 验证表情包文件夹 → 系统就绪
主处理流程
接收LLM回复文本 → 情感计分分析 → 选择最佳情感 → 概率检查 → 
随机选择表情包文件 → 格式化SSE响应 → 返回给调用方
详细处理步骤
    1. 文本预处理 
        ◦ 接收LLM完整回复文本 
        ◦ 清理和标准化文本内容 
    2. 情感计分 
        ◦ 遍历所有情感类别 
        ◦ 计算每个类别的匹配得分 
        ◦ 应用语境强化规则 
    3. 情感选择 
        ◦ 找出得分最高的情感类别 
        ◦ 处理得分相同的边界情况 
        ◦ 应用兜底逻辑 
    4. 概率控制 
        ◦ 根据情感类型选择对应概率 
        ◦ 执行随机判断 
        ◦ 决定是否发送表情包 
    5. 文件选择 
        ◦ 扫描对应情感文件夹 
        ◦ 过滤支持的图片格式 
        ◦ 随机选择一个文件 
    6. 响应格式化 
        ◦ 构建SSE格式数据 
        ◦ 包含正确的URL路径 
        ◦ 返回标准化响应 
六、配置管理策略
集中化配置
    • 所有可调参数集中在config.json 
    • 分类管理：路径配置、计分权重、概率控制、系统设置 
可调参数设计
    • 计分权重：各词汇类型的分数权重 
    • 语境调整：强化词和弱化词的倍数 
    • 概率控制：主概率和兜底概率 
    • 系统设置：调试模式、支持格式等 
热更新支持
    • 支持运行时重新加载配置 
    • 支持词库热更新 
    • 不需要重启系统

